"use strict";function submitForm(e,o){var t=""!=o;console.log("update? "+t);var i={first:e.first,last:e.last,email:e.email},n="";showSpinner(),t?(n=apiString+"/booking/"+o,$.ajax({url:n,type:"PUT",data:i,success:handleEditSuccess})):(n=apiString+"/create",$.post(n,i,handleEditSuccess)),hideSpinner()}function handleEditSuccess(e,o,t){console.log(e,o,t.statusText,t.status),201==t.status?($(".success-page > .section-header > h3").text("Thank you!"),$("#booked-id").text("Your booking ID: "+e.data.book_id),$("#booked-name").text("Registered name: "+e.data.first+" "+e.data.last),$("#booked-email").text("Email address: "+e.data.email),$(".success-page > .section-wrapper > p").show(),""!=$("#found-id").val()?($(".success-page > .section-header > p").text("Your accomodations have been updated successfully. Check out the details below:"),$("#found-id").val("")):$(".success-page > .section-header > p").text("Your accomodations have been booked successfully. Check out the details below:"),$(".booking-form").hide(),$(".success-page").show()):0==$("#errormsg").length&&$(".booking-form .section-wrapper").append('<p id="errormsg">Looks like there was an error, %s %s! Try again.</p>',t.status,t.statusText)}function cancelBooking(e){var o=apiString+"/booking/"+e;showSpinner(),$.ajax({url:o,type:"DELETE",success:handleDeleteSuccess}),hideSpinner()}function handleDeleteSuccess(){var e=$("#found-id").val();$(".success-page > .section-header > h3").text("Cancelled reservation"),$(".success-page > .section-wrapper > p").hide(),$(".success-page > .section-header > p").text("Your booking (#"+e+") has been cancelled. We're sorry to see you go!"),$(".booking-form").hide(),$(".success-page").show()}function findByRef(e){var o=apiString+"/booking/"+e;$.getJSON(o,function(e){e.data?($("#firstname").val(e.data.first),$("#lastname").val(e.data.last),$("#email").val(e.data.email),$("#found-id").val(e.data.book_id),$(".booking-form > .section-header > h3").text("Update your booking"),$(".booking-form > .section-header > p").text("We found your booking record, "+e.data.first+". Feel free to change any of the fields below if you need to update it."),$("#submit-btn").text("Update booking"),$(".booking-form > .section-footer > p").html('Want to start over? <a href="#" class="search-link">Go back</a>'),$(".cancel-link").click(function(){cancelBooking(e.data.book_id)}),$(".cancel-prompt").show(),$(".booking-form").show(),$(".search-form").hide(),$(".search-link").click(function(){$(".booking-form").hide(),$(".search-form").show()}),$("#search-input").val("")):console.log("not found!")})}function showSpinner(){console.info("showing spinner..."),$(".spinner").show()}function hideSpinner(){console.info("hiding spinner..."),$(".spinner").hide()}var apiString="https://com601-assign1.herokuapp.com/api";$(document).ready(function(){$(".booking-form").hide(),$(".cancel-prompt").hide(),$(".success-page").hide(),$(".spinner").hide(),$(".search-link").click(function(){$(".booking-form").hide(),$(".search-form").show()}),$(".booking-link").click(function(){$("#firstname").val(""),$("#lastname").val(""),$("#email").val(""),$("#search-input").val(""),$("#found-id").val(""),$(".cancel-prompt").hide(),$("#submit-btn").text("Reserve now"),$(".booking-form > .section-header > h3").text("Create a new booking"),$(".booking-form > .section-header > p").text("Fill out the fields below to book a new accomodation"),$(".booking-form > .section-footer > p").html('Already have accomodations? <a href="#" class="search-link">Look up your booking here!</a>'),$(".search-link").click(function(){$(".booking-form").hide(),$(".search-form").show()}),$(".booking-form").show(),$(".search-form").hide(),$(".success-page").hide()});var e=$("#submit-btn");e.click(function(){var e=$("#firstname").val(),o=$("#lastname").val(),t=$("#email").val(),i={first:e,last:o,email:t};if(e&&o&&t){var n=$("#found-id").val();console.log("booking: ",i,n),submitForm(i,n)}else console.log("form values missing!")});var o=$("#search-btn");o.click(function(){var e=$("#search-input").val();e?(showSpinner(),findByRef(e),hideSpinner()):console.log("search ID missing!",e)}),$("#search-input").keypress(function(e){13==e.keyCode&&o.click()}),$(".booking-form > .section-wrapper > input").keypress(function(o){13==o.keyCode&&e.click()});var t={lines:9,length:34,width:6,radius:24,scale:1,corners:.2,color:"#000",opacity:.25,rotate:0,direction:1,speed:.8,trail:25,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!0,position:"absolute"},i=$(".container"),n=new Spinner(t).spin();i.append(n.el),hideSpinner()});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,o){"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module.exports?module.exports=o():"function"==typeof define&&define.amd?define(o):e.Spinner=o()}(void 0,function(){function e(e,o){var t,i=document.createElement(e||"div");for(t in o)i[t]=o[t];return i}function o(e){for(var o=1,t=arguments.length;o<t;o++)e.appendChild(arguments[o]);return e}function t(e,o,t,i){var n=["opacity",o,~~(100*e),t,i].join("-"),a=.01+t/i*100,s=Math.max(1-(1-e)/o*(100-a),e),r=c.substring(0,c.indexOf("Animation")).toLowerCase(),d=r&&"-"+r+"-"||"";return p[n]||(l.insertRule("@"+d+"keyframes "+n+"{0%{opacity:"+s+"}"+a+"%{opacity:"+e+"}"+(a+.01)+"%{opacity:1}"+(a+o)%100+"%{opacity:"+e+"}100%{opacity:"+s+"}}",l.cssRules.length),p[n]=1),n}function i(e,o){var t,i,n=e.style;if(o=o.charAt(0).toUpperCase()+o.slice(1),void 0!==n[o])return o;for(i=0;i<d.length;i++)if(t=d[i]+o,void 0!==n[t])return t}function n(e,o){for(var t in o)e.style[i(e,t)||t]=o[t];return e}function a(e){for(var o=1;o<arguments.length;o++){var t=arguments[o];for(var i in t)void 0===e[i]&&(e[i]=t[i])}return e}function s(e,o){return"string"==typeof e?e:e[o%e.length]}function r(e){this.opts=a(e||{},r.defaults,u)}var c,l,d=["webkit","Moz","ms","O"],p={},u={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(r.defaults={},a(r.prototype,{spin:function(o){this.stop();var t=this,i=t.opts,a=t.el=e(null,{className:i.className});if(n(a,{position:i.position,width:0,zIndex:i.zIndex,left:i.left,top:i.top}),o&&o.insertBefore(a,o.firstChild||null),a.setAttribute("role","progressbar"),t.lines(a,t.opts),!c){var s,r=0,l=(i.lines-1)*(1-i.direction)/2,d=i.fps,p=d/i.speed,u=(1-i.opacity)/(p*i.trail/100),f=p/i.lines;!function e(){r++;for(var o=0;o<i.lines;o++)s=Math.max(1-(r+(i.lines-o)*f)%p*u,i.opacity),t.opacity(a,o*i.direction+l,s,i);t.timeout=t.el&&setTimeout(e,~~(1e3/d))}()}return t},stop:function(){var e=this.el;return e&&(clearTimeout(this.timeout),e.parentNode&&e.parentNode.removeChild(e),this.el=void 0),this},lines:function(i,a){function r(o,t){return n(e(),{position:"absolute",width:a.scale*(a.length+a.width)+"px",height:a.scale*a.width+"px",background:o,boxShadow:t,transformOrigin:"left",transform:"rotate("+~~(360/a.lines*d+a.rotate)+"deg) translate("+a.scale*a.radius+"px,0)",borderRadius:(a.corners*a.scale*a.width>>1)+"px"})}for(var l,d=0,p=(a.lines-1)*(1-a.direction)/2;d<a.lines;d++)l=n(e(),{position:"absolute",top:1+~(a.scale*a.width/2)+"px",transform:a.hwaccel?"translate3d(0,0,0)":"",opacity:a.opacity,animation:c&&t(a.opacity,a.trail,p+d*a.direction,a.lines)+" "+1/a.speed+"s linear infinite"}),a.shadow&&o(l,n(r("#000","0 0 4px #000"),{top:"2px"})),o(i,o(l,r(s(a.color,d),"0 0 1px rgba(0,0,0,.1)")));return i},opacity:function(e,o,t){o<e.childNodes.length&&(e.childNodes[o].style.opacity=t)}}),"undefined"!=typeof document){l=function(){var t=e("style",{type:"text/css"});return o(document.getElementsByTagName("head")[0],t),t.sheet||t.styleSheet}();var f=n(e("group"),{behavior:"url(#default#VML)"});!i(f,"transform")&&f.adj?function(){function t(o,t){return e("<"+o+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',t)}l.addRule(".spin-vml","behavior:url(#default#VML)"),r.prototype.lines=function(e,i){function a(){return n(t("group",{coordsize:d+" "+d,coordorigin:-l+" "+-l}),{width:d,height:d})}function r(e,r,c){o(u,o(n(a(),{rotation:360/i.lines*e+"deg",left:~~r}),o(n(t("roundrect",{arcsize:i.corners}),{width:l,height:i.scale*i.width,left:i.scale*i.radius,top:-i.scale*i.width>>1,filter:c}),t("fill",{color:s(i.color,e),opacity:i.opacity}),t("stroke",{opacity:0}))))}var c,l=i.scale*(i.length+i.width),d=2*i.scale*l,p=-(i.width+i.length)*i.scale*2+"px",u=n(a(),{position:"absolute",top:p,left:p});if(i.shadow)for(c=1;c<=i.lines;c++)r(c,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(c=1;c<=i.lines;c++)r(c);return o(e,u)},r.prototype.opacity=function(e,o,t,i){var n=e.firstChild;i=i.shadow&&i.lines||0,n&&o+i<n.childNodes.length&&(n=(n=(n=n.childNodes[o+i])&&n.firstChild)&&n.firstChild)&&(n.opacity=t)}}():c=i(f,"animation")}return r});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
